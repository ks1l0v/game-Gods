import random
import telebot
import data
import buttons
import mobs

bot = telebot.TeleBot('5842917493:AAGGg8sbA7cuq4XuITc640zVSsvHpkvMpsU')

if data.check_hero_db(67821449):
    pass
else:
    data.create_new_hero(67821449, '–ê–¥–º–∏–Ω', '–ê–º–∏—Ä', 'none', 10, 12, 10000, 'None', 1000)

@bot.message_handler(commands=['start'])
def start_message(message):
    id = message.from_user.id
    if data.check_hero_db(id):
        hello_to_user = random.choice((f"–ü—Ä–∏–≤–µ—Ç {data.hero_info(id)[1]}", f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é {data.hero_info(id)[1]}",
                                       f"–≠—Ç–æ –∂–µ {data.hero_info(id)[1]}! –ü–æ—à–ª–∏ –ø–∏—Ç—å!", "–î–∞ —è —Å–ª—ã—à—É —Å–ª—ã—à—É",
                                       f'–•–æ—á–µ—à—å –≤ –¥–∞–Ω–∂?', f'–ö–∞–∫ –∂–∏–∑–Ω—å {data.hero_info(id)[1]}?'))
        bot.send_message(id, hello_to_user, reply_markup=buttons.start_buttons())

    else:
        text = f'–ó–¥—Ä–∞–≤—Ç–≤—É–π, –º–µ–Ω—è –∑–æ–≤—É—Ç *–ì—É—Å—Ç–∞–≤*, –Ω–∞ –≤—Å–µ–º —Ç–≤–æ–µ–π –ø—É—Ç–∏ —è –±—É–¥—É –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–±–µ.\n\n' \
               f'*{message.from_user.first_name}* –∫–æ–Ω–µ—á–Ω–æ –∫—Ä—É—Ç–æ –∑–≤—É—á–∏—Ç, –Ω–æ –¥–∞–≤–∞–π –ø–æ–¥–±–µ—Ä–µ–º —Ç–µ–±–µ —á—Ç–æ-—Ç–æ –±–æ–ª–µ–µ –≥–µ—Ä–æ–∏—á–µ—Å–∫–æ–µ.'
        text2 = '–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–µ –Ω–æ–≤–æ–µ –∏–º—è:'

        bot.send_message(id, text, parse_mode='Markdown')
        bot.send_message(id, text2)
        bot.register_next_step_handler(message, register_step1, id)

#-------------------------------------------------------------------------------–ó–ù–ê–ö–û–ú–°–¢–í–û –° –ò–ì–†–û–ô
def register_step1(message, id):
    name = message.text
    text = f'{name}, –¥—Ä—É–≥–æ–µ –¥–µ–ª–æ!\n–ò–º—è –¥–æ–±—Ä–æ–µ, –∞ –≥–ª–∞–≤–Ω–æ–µ –ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω–æ–µ.'
    text2 = '–ê —Ç–µ–ø–µ—Ä—å —Å–∫–∞–∂–∏ –ø–∞—Ä—É —Å–ª–æ–≤ –æ —Å–µ–±–µ –∏ –æ —Å–≤–æ–µ–π –∏—Å—Ç–æ—Ä–∏–∏ —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ –≥–µ—Ä–æ–∏ –º–æ–≥–ª–∏ –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å –∫—Ç–æ —Ç—ã.'
    bot.send_message(id, text)
    bot.send_message(id, text2)
    bot.register_next_step_handler(message, register_step2, id, name)

def register_step2(message, id, name):
    bio = message.text
    data.create_new_hero(id, name, message.from_user.first_name, message.from_user.username, info=bio)
    text = '–ù–µ –±–æ–π—Å—è, —É —Ç–µ–±—è –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–µ –∏–º—è –∏ –±–∏–æ'
    text2 = f'–ê –ø–æ–∫–∞ —É –º–µ–Ω—è –∫ —Ç–µ–±–µ –≥–ª–∞–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å\n{name} —Ç—ã –≥–æ—Ç–æ–≤ –∫ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º?'
    bot.send_message(id, text)
    bot.send_message(id, text2, reply_markup=buttons.lesgooo())
    bot.register_next_step_handler(message, register_step3, id)

def register_step3(message, id):
    if message.text == '–í–ø–µ—Ä–µ–¥, —è –≥–æ—Ç–æ–≤!':
        bot.send_message(id, '–ü–æ–∫–∞–∂–∏ –±–æ–≥–∞–º —á–µ–≥–æ —Ç—ã –¥–æ—Å—Ç–æ–∏–Ω', reply_markup=buttons.pon('', ""))
        bot.register_next_step_handler(message, register_step4, id)
    elif message.text == '–ú–æ–∂–Ω–æ —è –ø–æ–π–¥—É –¥–æ–º–æ–π?':
        bot.send_message(id, '–•–ê–•–ê–•–ê –ö–û–ù–ï–ß–ù–û –ù–ï–¢, –≤–ø–µ—Ä–µ–¥ –≤–ø–µ—Ä–µ–¥!', reply_markup=buttons.pon('–û–öüóø', "–ó–∞—á–µ–º —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å?"))
        bot.register_next_step_handler(message, register_step4, id)

def register_step4(message, id):
    bot.send_message(id, '–¢—ã –∑–¥–µ—Å—å –Ω–æ–≤–µ–Ω—å–∫–∏–π, –ø–æ —ç—Ç–æ–º—É –¥–∞–≤–∞–π –ø—Ä–æ–≤–µ–¥—É –Ω–µ–±–æ–ª—å—à–æ–π —ç–∫—Å–∫—É—Ä—Å')
    bot.send_message(id, '–í —Ä–∞–∑–¥–µ–ª–µ "–ü–æ–º–æ—â—å" —Ç—ã —Å–º–æ–∂–µ—à—å –æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è —Å–æ –≤—Å–µ–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏ —ç—Ç–æ–≥–æ –º–∏—Ä–∞')
    bot.send_message(id, '–¢–∞–∫ —á—Ç–æ –¥–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å—Ä–∞–∑—É —Å –ø–æ–¥–∑–µ–º–µ–ª—å—è', reply_markup=buttons.begin_dungeon())
    bot.register_next_step_handler(message, begin_dungeon, id)
#------------------------------------------------------------------------------–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ

@bot.message_handler(content_types= ['text'])
def heroes_menu(message):

    if message.text == '‚öîÔ∏è –î–∞–Ω–∂ ‚öîÔ∏è':
        data.exist_fight(message.from_user.id)
        if data.hero_info(message.from_user.id)[4] < 0:
            bot.send_message(message.from_user.id, '–ü—Ä–æ–π–¥–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —Ä–∞–∑', reply_markup=buttons.begin_dungeon())
            bot.register_next_step_handler(message, dungeon_start)
        else:
            bot.send_message(message.from_user.id, '–ü–æ–¥–∑–µ–º–µ–ª—å–µ - –º–µ—Å—Ç–æ –≥–¥–µ —Ç–µ–±—è –Ω–µ —É—Å–ª—ã—à–∞—Ç –±–æ–≥–∏',
                             reply_markup=buttons.dungeon(message.from_user.id))
            bot.register_next_step_handler(message, dungeon)

    elif message.text == 'üíº–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å':
        bot.send_message(message.from_user.id, '–ì—É—Å—Ç–∞–≤ –ø—Ä–æ—Ç—è–≥–∏–≤–∞—Ç –≤–∞–º –≤–∞—à—É —Å—É–º–∫—É', reply_markup=buttons.pokaz())
        bot.register_next_step_handler(message, invent)

    elif message.text == '–û–±–æ –º–Ω–µ':
        id = message.from_user.id
        user = data.hero_info(id)
        bot.send_message(id, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–±–µ:', reply_markup=buttons.about_me())
        bot.send_message(id, f'–¢–≤–æ–µ –∏–º—è: *{user[1]}*\n–ú–µ–¥–∞–ª–∏: *{user[8]}*\n–°–∏–ª–∞: *{user[6]}*\n–ú–∏–Ω-–®–∞–Ω—Å: '
                             f'*{user[5]}*%\n–£—Ä–æ–≤–µ–Ω—å: *{user[4]}*\n–ë–∏–æ: {user[7]}', parse_mode='Markdown')
        bot.register_next_step_handler(message, me_info)

    elif message.text == '‚ùì–ü–æ–º–æ—â—å':
        keyboard = telebot.types.InlineKeyboardMarkup()
        url_button = telebot.types.InlineKeyboardButton(text="–ó–∞–π—Ç–∏ –≤ –∑–∞–ª –¢–æ—Ç'–∞", url="https://telegra.ph/Geroi-Olimpa-11-23")
        keyboard.add(url_button)
        bot.send_message(message.from_user.id, '–¢–æ—Ç - –±–æ–≥ –∑–Ω–∞–Ω–∏–π, –¥–∞–µ—Ç —Ç–µ–±–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–∑–Ω–∞—Ç—å —Å–µ–∫—Ä–µ—Ç—ã –º–∏—Ä–æ–∑–¥–∞–Ω–∏—è',
                         reply_markup=keyboard)

    elif message.text == '‚õ™Ô∏è–•—Ä–∞–º –ë–æ–≥–æ–≤':
        bot.send_message(message.from_user.id,
                         '*–•—Ä–∞–º –±–æ–≥–æ–≤* - —Å–≤—è—â–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ –≥–¥–µ –∫–∞–∂–¥—ã–π —Å–º–µ—Ä—Ç–Ω—ã–π –º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ —Å–≤—è–∑—å —Å –±–æ–≥–∞–º–∏',
                         parse_mode='Markdown', reply_markup=buttons.hram())
        bot.register_next_step_handler(message, hram_shop)

    elif message.text == '–î—Ä—É–∑—å—è':
        bot.send_message(message.from_user.id,
                         random.choice(('–ê –≤–æ—Ç —Ç–≤–æ–∏ –¥—Ä—É–∑—å—è —Ö–æ–¥—è—Ç –≤ –±–∞—Ä', '–ù–æ–≤—ã–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ –≤—Å–µ–≥–¥–∞ —Ö–æ—Ä–æ—à–æ',
                                        '–≠—Ç–æ —á—Ç–æ, —Å—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤–∞—è —Å–æ—Ü —Å–µ—Ç—å?')),
                         reply_markup=buttons.friends())
        bot.register_next_step_handler(message, friends)

    elif message.text == '–ê–¥–º–∏–Ω' and message.from_user.id == 67821449:
        bot.send_message(message.from_user.id, '–û–ø—è—Ç—å —Ç—ã, —á—Ç–æ –Ω–∞ —ç—Ç–æ—Ç —Ä–∞–∑?', reply_markup=buttons.admin())
        bot.register_next_step_handler(message, admin)

#--------------------------------------------------------------------------------------–î–ê–ù–ñ

def dungeon(message):
    txt = message.text
    id = message.from_user.id
    data.exist_fight(id)
    if txt == f'–£—Ä–æ–≤–µ–Ω—å {data.hero_info(id)[4]}':
        bot.send_message(id, '–ï—Å–ª–∏ —á—Ç–æ, —è —Ç–µ–±—è –≤—ã—Ç–∞—â—é', reply_markup=buttons.vper())
        bot.register_next_step_handler(message, dungeon_start)
    elif txt == '–ó–∞–ª –ê—Ñ–∏–Ω—ã' and data.hero_info(id)[4] >= 10:
        bot.send_message(id, '–ó–∞–ª –ê—Ñ–∏–Ω—ã - –∑–∞ –∫–∞–∂–¥—ã–π —Å–ø–∞—Ä–∏–Ω–≥ —Å –≤–æ–∏–Ω–æ–º –±–æ–≥–∏–Ω–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 1 –º–µ–¥–∞–ª—å',
                         reply_markup=buttons.afina())
        bot.register_next_step_handler(message, afina)
    elif txt == '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥':
        bot.send_message(id, '–ù—É –∏ —Å–ª–∞–≤–Ω–µ–Ω—å–∫–æ, –ø–æ—à–ª–∏ –≤ –±–∞—Ä', reply_markup=buttons.start_buttons())

def dungeon_start(message):
    id = message.from_user.id
    lvl = data.hero_info(id)[4]
    if lvl <= 0:
        bot.send_message(id, '–ù–µ –ø—Ä–æ—à–µ–ª –æ–±—É—á–µ–Ω–∏–µ, –∫–∞–∫ –º–∏–ª–æ, –¥–∞–≤–∞–π –∑–∞–Ω–æ–≤–æ', reply_markup=buttons.pon('–¢–∞–∫ —É –º–µ–Ω—è —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞ –Ω–µ –±—ã–ª–æ –≤—ã–±–æ—Ä–∞', "–•–µ—Ö–µ"))
        bot.register_next_step_handler(message, begin_dungeon, id)
    else:
        enemy = random.choice(mobs.mobs)
        en = lvl * (lvl * 0.2)
        enemy_power = round(en)
        enemy_hp = 120 * (lvl * 0.2)
        hp = data.hero_info(id)[6] * (lvl * 0.2)

        data.fight(id, round(hp), enemy["name"], round(enemy_hp))

        text = f'–°–∏–ª–∞ –≤—Ä–∞–≥–æ–≤ –Ω–∞ —É—Ä–æ–≤–Ω–µ - {enemy_power}'
        bot.send_message(id, text, reply_markup=buttons.lesgo())
        bot.register_next_step_handler(message, dungeon_start_fight, id, enemy, enemy_power)

def dungeon_start_fight(message, id, enemy, enemy_power):
    if message.text == '–í–ø–µ—Ä–µ–¥!':
        text = f'–ù–∞ –≤–∞—Å –Ω–∞–ø–∞–ª {enemy["name"]}'
        hp_info = f'–í–∞—à–µ HP: {data.get_fight_info(id)[1]}\n' \
               f'{data.get_fight_info(id)[2]}: {data.get_fight_info(id)[3]}'
        bot.send_message(id, text, reply_markup=buttons.atac())
        bot.send_message(id, hp_info)
        bot.register_next_step_handler(message, fight, id, enemy, enemy_power)
    elif message.text == '–Ø –ø–µ—Ä–µ–¥—É–º–∞–ª':
        bot.send_message(id, '–ì—É—Å—Ç–∞–≤ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª –≤–∞—Å –Ω–∞–∑–∞–¥', reply_markup=buttons.start_buttons())

def fight(message, id, enemy, enemy_power):
    min = data.hero_info(id)[5] * (data.hero_info(id)[6] / 100)
    damage = random.randint(min, data.hero_info(id)[6])
    damage_enemy = random.randint(0, enemy_power)
    data.fight_minus_hp(id, 'hp', damage_enemy)
    data.fight_minus_hp(id, 'enemy_hp', damage)
    if data.get_fight_info(id)[3] > 0 and data.get_fight_info(id)[1] > 0:
        if message.text == '–ê—Ç–∞–∫–æ–≤–∞—Ç—å':
            text = f'–í—ã –Ω–∞–Ω–æ—Å–∏—Ç–µ –≤—Ä–∞–≥—É *{damage}* –µ–¥–∏–Ω–∏—Ü —É—Ä–æ–Ω–∞\n' \
                   f'–í—Ä–∞–≥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç {random.choice(enemy["attacks"])}\n' \
                   f'–¢–µ–º —Å–∞–º—ã –Ω–∞–Ω–æ—Å—è –≤–∞–º  *{damage_enemy}* –µ–¥–∏–Ω–∏—Ü —É—Ä–æ–Ω–∞' \
                   f'{enemy["name"]} –≥–æ–≤–æ—Ä–∏—Ç: {random.choice(enemy["speak"])}\n\n' \
                   f'–í–∞—à–µ HP: {data.get_fight_info(id)[1]}         HP –í—Ä–∞–≥–∞: {data.get_fight_info(id)[3]}'
            bot.send_message(id, text, parse_mode='Markdown')
            bot.register_next_step_handler(message, fight, id, enemy, enemy_power)
        elif message.text == '–°–¥–∞—Ç—å—Å—è':
            data.exist_fight(id)
            bot.send_message(id, '–ù–µ –ø–∞–¥–∞–π –¥—É—Ö–æ–º', reply_markup=buttons.start_buttons())

        else:
            bot.send_message(id, '–ù–µ –≤—Ä–µ–º—è –æ—Ç–≤–ª–µ–∫–∞—Ç—å—Å—è')
            bot.register_next_step_handler(message, fight, id, enemy, enemy_power)
    elif data.get_fight_info(id)[3] <= 0:
        data.exist_fight(id)
        data.winner_winner(id, 2)
        if data.hero_info(id)[4] == 10:
            bot.send_message(id, '–ê—Ñ–∏–Ω–∞ –ø–æ—Ä–∞–∂–µ–Ω–∞ –≤–∞—à–∏–º–∏ —É—Å–ø–µ—Ö–∞–º–∏ –≤ –ø–æ–¥–∑–µ–º–µ–ª—å–µ, –∏ –ø—Ä–æ—Å–∏—Ç –≤–∞—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å –µ–µ —Å–æ–ª–¥–∞—Ç\n\n'
                                 '–ó–∞ –∫–∞–∂–¥—ã–π —Å–ø–∞—Ä–∏–Ω–≥ —Å –≤–æ–∏–Ω–æ–º –ê—Ñ–∏–Ω –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 1 –º–µ–¥–∞–ª—å')
        bot.send_message(id, f'–í—ã –Ω–∞–Ω–µ—Å–ª–∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ {damage} –µ–¥–∏–Ω–∏—Ü —É—Ä–æ–Ω–∞ –∏ —É–±–∏–ª–∏ –≤—Ä–∞–≥–∞!\n'
                         f'–ë–æ–≥–∏ –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã –≤–∞–º –∑–∞ —Å–¥–µ–ª–∞–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É –∏ –æ–¥–∞—Ä–∏–ª–∏ –≤–∞—Å *2 –º–µ–¥–∞–ª—è–º–∏*!',
                         reply_markup=buttons.start_buttons(), parse_mode='Markdown')
    else:
        bot.send_message(id, '*–ì—É—Å—Ç–∞–≤ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç –≤–∞—Å –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–æ–º–µ–Ω—Ç –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å*', parse_mode='Markdown')
        bot.send_message(id, '–í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –±—É–¥—å –æ—Å—Ç–æ—Ä–æ–∂–Ω–µ–µ', reply_markup=buttons.start_buttons())

def begin_dungeon(message, id):
    bot.send_message(id, "–°–µ–π—á–∞—Å –º—ã –Ω–∞ —Å–∞–º–æ–π –≤–µ—Ä—Ö—É—à–∫–µ –ø–æ–¥–∑–µ–º–µ–ª—å—è")
    bot.send_message(id, "–ì–ª–∞–≤–Ω–æ–µ –ø–æ–º–Ω–∏—Ç—å - —á–µ–º –≤—ã—à–µ —É—Ä–æ–≤–µ–Ω—å, —Ç–µ–º —Å–∏–ª—å–Ω–µ–µ –≤—Ä–∞–≥–∏",
                     reply_markup=buttons.pon('–ú–Ω–µ —Å—Ç—Ä–∞—à–Ω–æ', "–ö–∞–∫ –¥—Ä–∞—Ç—å—Å—è?"))
    bot.register_next_step_handler(message, begin_dungeon2, id)

def begin_dungeon2(message, id):
    if message.text == '–ú–Ω–µ —Å—Ç—Ä–∞—à–Ω–æ':
        bot.send_message(id, '–ü–æ–Ω–∏–º–∞—é, —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –º–Ω–µ –±—ã —Ç–æ–∂–µ –±—ã–ª–æ —Å—Ç—Ä–∞—à–Ω–æ')
        bot.send_message(id, '–ù–æ –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å –Ω–∞–∑–∞–¥ —É–∂–µ –ø–æ–∑–¥–Ω–æ')
        bot.send_message(id, '–í –¥–≤—É—Ö —Å–ª–æ–≤–∞—Ö, –±–æ–π –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–≤–æ–µ–π —É–¥–∞—á–∏, –ª–∞–¥–Ω–æ —ç—Ç–æ —É–∂–µ —á–µ—Ç—ã–µ —Å–ª–æ–≤',
                         reply_markup=buttons.pon("–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–∑–¥–Ω–æ", "–ò—Ö –±—ã–ª–æ –ø—è—Ç—å..."))
        bot.register_next_step_handler(message, begin_dungeon3, id)

    elif message.text == '–ö–∞–∫ –¥—Ä–∞—Ç—å—Å—è?':
        bot.send_message(id, '–•–æ—Ä–æ—à–∏–π –≤–æ–ø—Ä–æ—Å, –æ—Ç–≤–µ—Ç –µ—â–µ –ª—É—á—à–µ - —Å –ë–æ–∂—å–µ–π –ø–æ–º–æ—â—å—é')
        bot.send_message(id, '–°–∏–ª–∞ —Ç–≤–æ–µ–≥–æ —É–¥–∞—Ä–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–≤–æ–µ–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∏–ª—ã –∏ —É–¥–∞—á–∏',
                         reply_markup=buttons.pon("–Ø—Å–Ω–æ, –º–Ω–µ –∫–æ–Ω–µ—Ü", "–í–Ω—É—à–∞–µ—Ç –¥–æ–≤–µ—Ä–∏–µ"))
        bot.register_next_step_handler(message, begin_dungeon3, id)

def begin_dungeon3(message, id):
    bot.send_message(id, '–ê –≤–æ—Ç –∏ –ø–æ–¥—Ö–æ–¥—è—â–∞—è —Ü–µ–ª—å!')
    bot.send_message(id, '–ù–∞ –≤–∞—Å –Ω–∞–ø–∞–ª –¥–µ–º–æ–Ω')
    bot.send_message(id, '–í–∞—à–µ HP - 10\n–î–µ–º–æ–Ω - 10', reply_markup=buttons.pon('–ê—Ç–∞–∫–æ–≤–∞—Ç—å', '–ü–ª–∞–∫–∞—Ç—å'))
    bot.register_next_step_handler(message, begin_dungeon4, id)

def begin_dungeon4(message, id):
    if message.text == '–ü–ª–∞–∫–∞—Ç—å':
        bot.send_message(id, '–°–ª–µ–∑–∞–º–∏ –≥–æ—Ä—é –Ω–µ –ø–æ–º–æ–∂–µ—à—å, –∞—Ç–∞–∫—É–π')
        bot.register_next_step_handler(message, begin_dungeon4, id)
    elif message.text == '–ê—Ç–∞–∫–æ–≤–∞—Ç—å':
        text = f'–í—ã –Ω–∞–Ω–æ—Å–∏—Ç–µ –≤—Ä–∞–≥—É *5* –µ–¥–∏–Ω–∏—Ü —É—Ä–æ–Ω–∞\n' \
                       f'–í—Ä–∞–≥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —É–¥–∞—Ä —Ä—É–∫–æ–π\n' \
                       f'–¢–µ–º —Å–∞–º—ã –Ω–∞–Ω–æ—Å—è –≤–∞–º  1 –µ–¥–∏–Ω–∏—Ü —É—Ä–æ–Ω–∞\n' \
                       f'–î–µ–º–æ–Ω –≥–æ–≤–æ—Ä–∏—Ç: œÑŒ±ŒªŒ±ŒπœÄœâœÅŒØŒ±\n\n' \
                       f'–í–∞—à–µ HP: 9        HP –í—Ä–∞–≥–∞: 5'
        bot.send_message(id, text, parse_mode='Markdown')
        bot.send_message(id, f'–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å, {data.hero_info(id)[1]}', reply_markup=buttons.pon('–ê—Ç–∞–∫–æ–≤–∞—Ç—å', "–î–∞ —è –Ω–µ —Ö–æ—á—É –¥—Ä–∞—Ç—å—Å—è"))
        bot.register_next_step_handler(message, begin_dungeon5, id)
    else:
        bot.send_message(id, '–ù–µ –æ—Ç–≤–ª–µ–∫–∞–π—Å—è')
        bot.register_next_step_handler(message, begin_dungeon4, id)

def begin_dungeon5(message, id):
    if message.text == '–î–∞ —è –Ω–µ —Ö–æ—á—É –¥—Ä–∞—Ç—å—Å—è' or message.text == '–ê—Ç–∞–∫–æ–≤–∞—Ç—å':
        if message.text == '–î–∞ —è –Ω–µ —Ö–æ—á—É –¥—Ä–∞—Ç—å—Å—è':
            bot.send_message(id, '–ê –ø—Ä–∏–¥–µ—Ç—Å—è')
            bot.register_next_step_handler(message, begin_dungeon5, id)
        else:
            bot.send_message(id, '–í–æ—Ç —ç—Ç–æ —Å–∏–ª–∞ –¥—É—Ö–∞')
            text = f'–í—ã –Ω–∞–Ω–µ—Å–ª–∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ 5 –µ–¥–∏–Ω–∏—Ü —É—Ä–æ–Ω–∞ –∏ —É–±–∏–ª–∏ –≤—Ä–∞–≥–∞!'
            bot.send_message(id, text)
            bot.send_message(id, f'–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å, {data.hero_info(id)[1]}',
                             reply_markup=buttons.pon('–°–ø–∞—Å–∏–±–æ', "–Ø —Ç–∞–∫ –ø–æ–Ω–∏–º–∞—é —É –º–µ–Ω—è –∏ –¥–∞–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –≤—ã–±–æ—Ä–∞"))
            bot.register_next_step_handler(message, begin_dungeon6, id)
    else:
        bot.send_message(id, '–ù–µ –æ—Ç–≤–ª–µ–∫–∞–π—Å—è')
        bot.register_next_step_handler(message, begin_dungeon5, id)

def begin_dungeon6(message, id):
    data.winner_winner(id, 0)
    if message.text == "–Ø —Ç–∞–∫ –ø–æ–Ω–∏–º–∞—é —É –º–µ–Ω—è –∏ –¥–∞–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –≤—ã–±–æ—Ä–∞":
        bot.send_message(id, '–¢—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω–∏–º–∞–µ—à—å')
    bot.send_message(id, '–í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ —Ç—ã –±—É–¥–µ—à—å –∑–¥–µ—Å—å –æ–¥–∏–Ω, –∞ —è –±—É–¥—É –Ω–∞–≤–µ—Ä—Ö—É —á—Ç–æ–±—ã –≤ —Å–ª—É—á–∞–µ —á–µ–≥–æ —Ç–µ–±—è –≤—ã—Ç–∞—â–∏—Ç—å')
    bot.send_message(id, '–ù—É –∞ –ø–æ–∫–∞ —É –º–µ–Ω—è –≤—Å–µ, –µ—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã —Ç—ã –º–æ–∂–µ—à—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –≤ "–ü–æ–º–æ—â—å"', reply_markup=buttons.start_buttons())


def afina(message):
    id = message.from_user.id
    lvl = data.hero_info(id)[4]
    enemy = random.choice(mobs.afins)
    en = lvl * (lvl * 0.1)
    enemy_power = round(en)
    enemy_hp = 120 * (lvl * 0.2)
    hp = data.hero_info(id)[6] * (lvl * 0.2)

    data.fight(id, round(hp), enemy["name"], round(enemy_hp))

    text = f'–° –≤–∞–º–∏ –≤ —Å–ø–∞—Ä–∏–Ω–≥ –≤—Å—Ç–∞–ª {enemy["name"]}'
    hp_info = f'–í–∞—à–µ HP: {data.get_fight_info(id)[1]}\n' \
              f'{data.get_fight_info(id)[2]}: {data.get_fight_info(id)[3]}'
    bot.send_message(id, text, reply_markup=buttons.atac())
    bot.send_message(id, hp_info)
    bot.register_next_step_handler(message, afins_fight, id, enemy, enemy_power)

def afins_fight(message, id, enemy, enemy_power):
    min = data.hero_info(id)[5] * (data.hero_info(id)[6] / 100)
    damage = random.randint(min, data.hero_info(id)[6])
    damage_enemy = random.randint(0, enemy_power)
    data.fight_minus_hp(id, 'hp', damage_enemy)
    data.fight_minus_hp(id, 'enemy_hp', damage)

    if data.get_fight_info(id)[3] > 0 and data.get_fight_info(id)[1] > 0:
        if message.text == '–ê—Ç–∞–∫–æ–≤–∞—Ç—å':
            text = f'–í—ã –Ω–∞–Ω–æ—Å–∏—Ç–µ –≤—Ä–∞–≥—É *{damage}* –µ–¥–∏–Ω–∏—Ü —É—Ä–æ–Ω–∞\n' \
                   f'–í—Ä–∞–≥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç {random.choice(enemy["attacks"])}\n' \
                   f'–¢–µ–º —Å–∞–º—ã –Ω–∞–Ω–æ—Å—è –≤–∞–º  *{damage_enemy}* –µ–¥–∏–Ω–∏—Ü —É—Ä–æ–Ω–∞' \
                   f'{enemy["name"]} –≥–æ–≤–æ—Ä–∏—Ç: {random.choice(enemy["speak"])}\n\n' \
                   f'–í–∞—à–µ HP: {data.get_fight_info(id)[1]}         HP –í—Ä–∞–≥–∞: {data.get_fight_info(id)[3]}'
            bot.send_message(id, text, parse_mode='Markdown')
            bot.register_next_step_handler(message, afins_fight, id, enemy, enemy_power)
        elif message.text == '–°–¥–∞—Ç—å—Å—è':
            data.exist_fight(id)
            bot.send_message(id, '–ù–ê —Å–µ–≥–æ–¥–Ω—è —Ö–≤–∞—Ç–∏—Ç —Ç–µ–±–µ —Å–ø–∞—Ä–∏–Ω–≥–æ–≤', reply_markup=buttons.start_buttons())

        else:
            bot.send_message(id, '–ù–µ –≤—Ä–µ–º—è –æ—Ç–≤–ª–µ–∫–∞—Ç—å—Å—è')
            bot.register_next_step_handler(message, afins_fight, id, enemy, enemy_power)
    elif data.get_fight_info(id)[3] <= 0:
        data.exist_fight(id)
        data.send_medals(id, 1)
        bot.send_message(id, f'–í—ã –Ω–∞–Ω–µ—Å–ª–∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ {damage} –µ–¥–∏–Ω–∏—Ü —É—Ä–æ–Ω–∞ –∏ –ø–æ–≤–∞–ª–∏–ª–∏ –≤—Ä–∞–≥–∞!\n'
                             f'–ê—Ñ–∏–Ω–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–∞ –≤–∞–º –∑–∞ –º–∞—Å—Ç–µ—Ä –∫–ª–∞—Å—Å –∏ –¥–∞—Ä–æ–≤–∞–ª–∞ –≤–∞–º *1 –º–µ–¥–∞–ª—å*!',
                         reply_markup=buttons.start_buttons(), parse_mode='Markdown')
    else:
        bot.send_message(id, '*–í—ã –ø–∞–¥–∞–µ—Ç–µ –Ω–∞ –∑–µ–º–ª—é*', parse_mode='Markdown')
        bot.send_message(id, '–£—á–µ–Ω–∏–∫ –ø—Ä–µ–≤–∑–æ—à–µ–ª —É—á–∏—Ç–µ–ª—è', reply_markup=buttons.start_buttons())



#--------------------------------------------------------------------------------------–û–ë–û –ú–ù–ï

def me_info(message):
    id = message.from_user.id

    if message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è':
        bot.send_message(id, random.choice(('–ü—Ä–∏—à–ª–∏ –Ω–æ–≤–æ–µ –∏–º—è', "–î–∞–≤–Ω–æ —ç—Ç–æ–≥–æ –∂–¥–∞–ª, –Ω–∞ —á—Ç–æ –º–µ–Ω—è–µ–º?",
                                            "–í—Å–µ —á—Ç–æ —É–≥–æ–¥–Ω–æ –∫—Ä–æ–º–µ –ø—Ä–æ—à–ª–æ–≥–æ, —Å–ª—É—à–∞—é –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç")),
                         reply_markup=telebot.types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, change_name, id)

    elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –±–∏–æ':
        bot.send_message(id, random.choice(('–ü—Ä–∏—à–ª–∏ –Ω–æ–≤–æ–µ –±–∏–æ', "–ê –º–Ω–µ –Ω—Ä–∞–≤–∏–ª–æ—Å—å —Å—Ç–∞—Ä–æ–µ, –Ω–∞ —á—Ç–æ –∑–∞–º–µ–Ω–∏–º?",
                                            "–î–∞–≤–Ω–æ —Ö–æ—Ç–µ–ª –µ–≥–æ –ø–æ–º–µ–Ω—è—Ç—å")),
                         reply_markup=telebot.types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, change_bio ,id)

    elif message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥':
        bot.send_message(id, '–î–∞ –Ω–æ—Ä–Ω–∞–ª—å–Ω–æ–µ —É —Ç–µ–±—è –∏–º—è, –ø–æ—à–ª–∏ –≤ –¥–∞–Ω–∂', reply_markup=buttons.start_buttons())
    else:
        bot.register_next_step_handler(message, me_info,id)

def change_name(message, id):
    data.change_name(id, message.text)
    bot.send_message(id, f'{message.text}, —Ö–æ—Ä–æ—à–µ–µ –∏–º—è', reply_markup=buttons.about_me())
    bot.register_next_step_handler(message, me_info)

def change_bio(message, id):
    data.change_bio(id, message.text)
    bot.send_message(id, f'–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ', reply_markup=buttons.about_me())
    bot.register_next_step_handler(message, me_info)

#--------------------------------------------------------------------------------------–ò–ù–í–ï–ù–¢–ê–†–¨

def invent(message):
    id = message.from_user.id
    inv = data.get_invent(id)
    try:
        invent = []
        text = '–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å:\n\n'
        for x in inv:
            for i in mobs.gods:
                for god in i['type']:
                    if god == x:
                        invent.append(i['name'])
        gods_count = {}.fromkeys(invent, 0)
        for a in invent:
            gods_count[a] += 1
        for i in gods_count.keys():
            text += f'*–†—É–Ω–∞*, {gods_count[i]} —à—Ç, —Ö–æ–∑—è–∏–Ω {i}\n'
        bot.send_message(id, text, reply_markup=buttons.start_buttons(), parse_mode='Markdown')
    except:
        bot.send_message(id, '–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å:', reply_markup=buttons.start_buttons())


#--------------------------------------------------------------------------------------–•–†–ê–ú –ë–û–ì–û–í

def hram_shop(message):
    id = message.from_user.id
    txt = message.text

    if txt in [x['name'] for x in mobs.gods]:
        for god in mobs.gods:

            if god['name'] == txt:
                type = god['type']
                cos = god['medals']
                up = god['bonus']
                text = f'*–•–æ–∑—è–∏–Ω —Ä—É–Ω—ã - {god["name"]}*\n\n' \
                       f'*–û –±–æ–≥–µ:*\n{god["info"]}\n\n' \
                       f'*–ë–æ–Ω—É—Å —Ä—É–Ω:*\n{god["bonus_info"]}\n\n' \
                       f'*–°—Ç–æ–∏–º–æ—Å—Ç—å –†—É–Ω—ã*: {god["medals"]} –º–µ–¥–∞–ª–µ–π\n\n' \
                       f'*–ï—Å—Ç—å*: {data.hero_info(id)[9].count(god["type"])}              ' \
                       f'*–ú–µ–¥–∞–ª–∏*: {data.hero_info(id)[8]}'
                bot.send_message(id, text, parse_mode='Markdown', reply_markup=buttons.hram_buy(god["medals"]))
                bot.register_next_step_handler(message, hram_buy, type, cos, up)

    elif txt == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
        bot.send_message(id, random.choice(('–Ø —Ç–æ–∂–µ –Ω–µ–¥–æ–ª—é–±–ª–∏–≤–∞—é —ç—Ç–æ –º–µ—Å—Ç–æ', '–£ –º–µ–Ω—è –ø–æ–ª—É—á–∏–ª–æ—Å—å –∑–∞–º–∞–Ω–∏—Ç—å —Ç–µ–±—è –≤ –±–∞—Ä?',
                                            '–ü–æ—à–ª–∏ –æ—Ç—Å—é–¥–∞ –ø–æ–∫–∞ –ó–µ–≤—Å –º–µ–Ω—è –Ω–µ —É–≤–∏–¥–µ–ª, —è —É–∫—Ä–∞–ª –µ–≥–æ —Ç–∞–ø–æ—á–∫–∏',
                                            '–ú–æ–ª–∏—Ç—å—Å—è? –ù–µ—Ç —Å–ø–∞—Å–∏–±–æ', '–ê –ê—Ñ—Ä–æ–¥–∏—Ç–∞ –æ–±–æ –º–Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞–ª–∞?',
                                            '–ß—Ç–æ? –ö–æ–≥–¥–∞? –ê, –ø–æ—Å–ª—ã—à–∞–ª–æ—Å—å', '–ó–µ–≤—Å –±–æ–ª—å—à–µ –¥—É–º–∞–µ—Ç –æ —Å–≤–æ–µ–π –±–æ—Ä–æ–¥–µ —á–µ–º –æ –ª—é–¥—è—Ö',
                                            '')),
                         reply_markup=buttons.start_buttons())
    else:
        bot.send_message(message.from_user.id, '—Ç–∞–∫–æ–≥–æ –±–æ–≥–∞ –Ω–µ—Ç')
        bot.register_next_step_handler(message, hram_shop)

def hram_buy(message, type, cos, up):
    id = message.from_user.id
    txt = message.text

    if txt == f'–ö—É–ø–∏—Ç—å –†—É–Ω—É –∑–∞ {cos} –º–µ–¥–∞–ª–µ–π':

        if data.hero_info(id)[8] >= cos:

            if type == 'G' and data.hero_info(id)[9].count(type) >= 1 or type == 'B' and data.hero_info(id)[9].count(type) >= 3:
                bot.send_message(id, '–ü—Ä–∏–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ä—É–Ω', reply_markup=buttons.hram())
                bot.register_next_step_handler(message, hram_shop)

            else:
                data.buy(id, cos, type, up)
                bot.send_message(id, '–†—É–Ω–∞ –∫—É–ø–ª–µ–Ω–∞, –±–æ–≥–∏ –æ–¥–∞—Ä–∏–ª–∏ –≤–∞—Å —Å–≤–æ–∏–º –≤–Ω–∏–º–∞–Ω–∏–µ–º', reply_markup=buttons.hram())
                bot.register_next_step_handler(message, hram_shop)
        else:
            bot.send_message(id, '–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–µ–¥–∞–ª–µ–π', reply_markup=buttons.hram())
            bot.register_next_step_handler(message, hram_shop)

    elif txt == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –•—Ä–∞–º':
        bot.send_message(id, '–û–ø—è—Ç—å –≤ —Ö—Ä–∞–º?', reply_markup=buttons.hram())
        bot.register_next_step_handler(message, hram_shop)

    else:
        bot.register_next_step_handler(message, hram_buy, type, cos, up)

#-------------------------------------------------------------------------------------–î–†–£–ó–¨–Ø

def friends(message):
    id = message.from_user.id
    txt = message.text
    data.check_friends(id)

    if txt == '–î–æ–±–∞–≤–∏—Ç—å':
        bot.send_message(id, '–ù–µ –∑–∞–±—ã–≤–∞–π: –ö–æ–≥–¥–∞ —Ç—ã –æ–ø—Ä–∞–≤–ª—è–µ—à—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥—Ä—É–∂–±—É, —á–µ–ª–æ–≤–µ–∫ –≤–∏–¥–∏—Ç —Ç–≤–æ–π —Ä–µ–∞–ª—å–Ω—ã–π id')
        if data.hero_info(id)[10] >= 5:
            bot.send_message(id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ª–∏–º–∏—Ç –¥—Ä—É–∑–µ–π 5 —á–µ–ª–æ–≤–µ–∫')
            bot.register_next_step_handler(message, friends)

        else:
            bot.send_message(id, '–û—Ç–ø—Ä–∞–≤—å  telegram id —Å–≤–æ–µ–π–≥–æ –¥—Ä—É–≥–∞', reply_markup=telebot.types.ReplyKeyboardRemove())
            bot.register_next_step_handler(message, friends_add, id)

    elif txt == '–ü–æ–∫–∞–∑–∞—Ç—å':
        all = data.show_all_friends(id)
        text = f'\n*{random.choice(("–í–æ—Ç –æ–Ω–∏, —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ:", "–¢–≤–æ–∏ –¥—Ä—É–∑—å—è:", "–ö—Ä–æ–º–µ –º–µ–Ω—è —É —Ç–µ–±—è –µ—Å—Ç—å:","–õ—é–¥–∏ —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –ª—É—á—à–µ –Ω–µ –ø–∏—Ç—å:"))}*\n\n\n'
        for i in all:
            her = data.hero_info(i)
            text+=f'–ò–º—è: {her[1]}\n–£—Ä–æ–≤–µ–Ω—å: {her[5]}\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∏–ª–∞: {her[6]}\n' \
                  f'–±–∏–æ: {her[7]}\n----------------------------\n'
        bot.send_message(id, text, parse_mode='Markdown')
        bot.register_next_step_handler(message, friends)

    elif txt == '–£–¥–∞–ª–∏—Ç—å':
        bot.send_message(id, '–ö—Ç–æ –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç–æ–∏–Ω –Ω–∞—à–µ–π –¥—Ä—É—ç–∂–±—ã?', reply_markup=buttons.friends_message(id))
        bot.register_next_step_handler(message, delite_friends, id)

    elif txt == 'C–æ–æ–±—â–µ–Ω–∏–µ':
        bot.send_message(id, '–ö–æ–º—É –ø–µ—Ä–µ–¥–∞—Ç—å?', reply_markup=buttons.friends_message(id))
        bot.register_next_step_handler(message, friends_message, id)

    elif txt == '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥':
        bot.send_message(id, '–î—Ä—É–∑—å—è –ø–æ–¥–æ–∂–¥—É—Ç, –ø–æ—à–ª–∏ —É–±–∏–≤–∞—Ç—å –º–æ–Ω—Å—Ç—Ä–æ–≤', reply_markup=buttons.start_buttons())

    else:
        bot.register_next_step_handler(message, friends)


def friends_add(message, id):
    try:
        friend = int(message.text)

        try:
            if data.exist_friend(id, friend):
                bot.send_message(id, '–í—ã —É–∂–µ –¥—Ä—É–∂–∏—Ç–µ', reply_markup=buttons.friends())
            else:
                if data.hero_info(friend)[10] >= 5:
                    bot.send_message(id, random.choice(('–£ —Ç–≤–æ–µ–≥–æ –¥—Ä—É–≥–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –¥—Ä—É–∑–µ–π, –ª–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω',
                                                        '–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–µ—Å—Ç–∞ –≤ –µ–≥–æ —Å–µ—Ä–¥–µ—á–∫–µ, —É –Ω–µ–≥–æ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –¥—Ä—É–∑–µ–π',
                                                        "–õ–∏–º–∏—Ç –¥—Ä—É–∑–µ–π –ø—Ä–∏–≤—ã—à–µ–Ω, –∫–∞–∫ –ø–µ—á–∞–ª—å–Ω–æ, –ø–æ—à–ª–∏ –ª—É—á—à–µ –≤ –±–∞—Ä")),
                                     reply_markup=buttons.friends())
                else:

                    text = F'*{data.hero_info(id)[1]} —Ö–æ—á–µ—Ç —Å —Ç–æ–±–æ–π –¥—Ä—É–∂–∏—Ç—å*\n' \
                           F'–ë–∏–æ - {data.hero_info(id)[7]}\n' \
                           F'ID - {data.hero_info(id)[0]}'

                    bot.send_message(friend, text, reply_markup=buttons.friend_accept(), parse_mode='Markdown')
                    bot.send_message(id, '–ó–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω', reply_markup=buttons.start_buttons())

        except:
            bot.send_message(id, '–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –≤ –ø—Ä–∏–Ω—Ü–∏–ø–µ –Ω–µ —Å—Ç—Ä–∞—à–Ω–æ, –∏ –±–µ–∑ –¥—Ä—É–∑–µ–π –∫–∞–∫-—Ç–æ –∂–∏–ª–∏', reply_markup=buttons.friends())
    except:
        bot.send_message(id, '–ê–π–¥–∏ —ç—Ç–æ —Ü–∏—Ñ—Ä—ã', reply_markup=buttons.friends())
        bot.register_next_step_handler(message, friends)

def delite_friends(message, id):
    friend = message.text
    if data.all_heroes_by_name(message.text):

        if friend == data.hero_info(data.if_name_in_friends(id, friend))[1]:
            id2 = data.if_name_in_friends(id, friend)
            bot.send_message(id, '–£–¥–∞–ª—è–µ–º?', reply_markup=buttons.delele_fb())
            bot.register_next_step_handler(message, accept_deleting, id2, id)

        else:
            bot.send_message(id, '–û–Ω –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞—à–∏–º –¥—Ä—É–≥–æ–º', reply_markup=buttons.friends())
            bot.register_next_step_handler(message, friends)
    else:
        bot.send_message(id, '–¢–∞–∫–æ–≥–æ –≥–µ—Ä–æ—è –Ω–µ—Ç', reply_markup=buttons.friends())
        bot.register_next_step_handler(message, friends)

def accept_deleting(message, id2, id):
    txt = message.text
    if txt == '–û–Ω –Ω–µ –¥–æ—Å—Ç–æ–∏–Ω!' or txt == '–î–∞!':
        data.deleting(id, id2)
        bot.send_message(id, '–û–Ω –º–Ω–µ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –Ω—Ä–∞–≤–∏–ª—Å—è', reply_markup=buttons.friends())
        bot.register_next_step_handler(message, friends)
    elif txt == '–Ø –¥—É–º–∞—é –æ–Ω –∏—Å–ø—Ä–∞–≤–∏—Ç—Å—è' or txt == '–ö–æ–Ω–µ—á–Ω–æ –Ω–µ—Ç!':
        bot.send_message(id, '–í–∞—à –¥—Ä—É–≥ –ø–æ–º–∏–ª–æ–≤–∞–Ω', reply_markup=buttons.friends())
        bot.register_next_step_handler(message, friends)

def friends_message(message, id):
    to_friend = message.text
    if data.all_heroes_by_name(message.text):
        for i in data.show_all_friends(id):
            if data.hero_info(i)[1] == to_friend:
                bot.send_message(id, '–ß—Ç–æ –ø–µ—Ä–µ–¥–∞—Ç—å?', reply_markup=telebot.types.ReplyKeyboardRemove())
                bot.register_next_step_handler(message, send_friend_message, i, id)
    else:
        bot.send_message(id, '–¢–∞–∫–æ–≥–æ –≥–µ—Ä–æ—è –Ω–µ—Ç', reply_markup=buttons.friends())
        bot.register_next_step_handler(message, friends)

def send_friend_message(message, i, id):
    text = f'*{data.hero_info(id)[1]} –ø–µ—Ä–µ–¥–∞–ª*: {message.text}'
    try:
        bot.send_message(i, text, parse_mode='Markdown')
        bot.send_message(id, '–ü–µ—Ä–µ–¥–∞–ª', reply_markup=buttons.friends())
        bot.register_next_step_handler(message, friends)

    except:
        bot.send_message(id, '–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å', reply_markup=buttons.friends())
        bot.register_next_step_handler(message, friends)




@bot.callback_query_handler(func=lambda call: True)
def friend_accept(call):
    if call.data == 'yes':

        x = str(call.message)
        y = x[x.find('ID -')+5:]
        id1 = y.split("',")[0]
        id2 = call.from_user.id
        data.check_friends(id2)
        data.adding_friends(int(id1), id2)

        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=random.choice(('–ù–æ–≤—ã–π –¥—Ä—É–≥ –¥–æ–±–∞–≤–ª–µ–Ω', "–ú–æ–∂–µ—Ç —Ö–æ—Ç—è –±—ã –æ–Ω –±—É–¥–µ—Ç –ø–∏—Ç—å?")))
        bot.send_message(int(id1), f'{data.hero_info(id2)[1]} –ø—Ä–∏–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥—Ä—É–∂–±—É')

    elif call.data == 'no':

        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=random.choice(('–ù–∞ –Ω–µ—Ç –∏ —Å—É–¥–∞ –Ω–µ—Ç', "–ö—Ç–æ —ç—Ç–æ –≤–æ–æ–±—â–µ –±—ã–ª?", "–î–∞–∞–∞–∞, —Ç–æ–ª—å–∫–æ —Ç—ã –∏ —è",
                                                  "–î—É–º–∞—é –æ–Ω —Å–µ–π—á–∞—Å –≥–¥–µ-—Ç–æ –ø–ª–∞—á–µ—Ç")))
#------------------------------------------------------------------------------------–ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨

def admin(message):
    id = message.from_user.id
    x = message.text
    if x == '–£–¥–∞–ª–∏—Ç—å —é–∑–µ—Ä–∞':
        bot.send_message(id, '–û—Ç–ø—Ä–∞–≤—å id –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è', reply_markup=buttons.otmena())
        bot.register_next_step_handler(message, delite_ad)
    elif x == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∞–ª–∏':
        bot.send_message(id, '–û—Ç–ø—Ä–∞–≤—å id –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è', reply_markup=buttons.otmena())
        bot.register_next_step_handler(message, medals_admin)
    elif x == '–°–∫–æ–ª—å–∫–æ —é–∑–µ—Ä–æ–≤':
        bot.send_message(id, f'–í –±–∞–∑–µ {data.get_all_admin_users()} —á–µ–ª–æ–≤–µ–∫')
        bot.register_next_step_handler(message, admin)
    elif x == '–ò–Ω—Ñ–∞ –ø–æ id':
        bot.send_message(id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ id —á—Ç–æ–±—ã –µ–≥–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å', reply_markup=buttons.otmena())
        bot.register_next_step_handler(message, check_admin)
    elif x == '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é':
        bot.send_message(id, '–û–∫', reply_markup=buttons.start_buttons())

def delite_ad(message):

    if message.text == "–û—Ç–º–µ–Ω–∞":
        bot.send_message(message.from_user.id, '–û–∫–µ', reply_markup=buttons.admin())
        bot.register_next_step_handler(message, admin)
    else:
        try:
            id = int(message.text)
            if data.check_hero_db(id):
                data.admin_delite(id)
                bot.send_message(message.from_user.id, '—É–¥–∞–ª–µ–Ω', reply_markup=buttons.admin())
                bot.register_next_step_handler(message, admin)
        except:
            bot.send_message(message.from_user.id, '–ù–µ –ø–æ–Ω–∏–º–∞—é', reply_markup=buttons.admin())
            bot.register_next_step_handler(message, admin)

def medals_admin (message):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        bot.send_message(message.from_user.id, '–û–∫–µ', reply_markup=buttons.admin())
        bot.register_next_step_handler(message, admin)
    else:
        try:
            id = int(message.text)
            if data.check_hero_db(id):
                bot.send_message(message.from_user.id, '–°–∫–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º')
                bot.register_next_step_handler(message, medals_admin_sum, id)
            else:
                bot.send_message(message.from_user.id, '–¢–∞–∫–æ–≥–æ –Ω–µ—Ç')
                bot.register_next_step_handler(message, admin)
        except:
            bot.send_message(message.from_user.id, '–ù–µ –ø–æ–Ω–∏–º–∞—é', reply_markup=buttons.admin())
            bot.register_next_step_handler(message, admin)

def medals_admin_sum(message, id):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        bot.send_message(message.from_user.id, '–û–∫–µ', reply_markup=buttons.admin())
        bot.register_next_step_handler(message, admin)
    else:
        try:
            sum = int(message.text)
            data.send_medals(id, sum)
            bot.send_message(message.from_user.id, '–û—Ç–ø—Ä–∞–≤–∏–ª', reply_markup=buttons.admin())
            bot.send_message(id, f'–ë–æ–≥–∏ –ø–æ–¥–∞—Ä–∏–ª–∏ –≤–∞–º {sum} –º–µ–¥–∞–ª–µ–π')
            bot.register_next_step_handler(message, admin)
        except:
            bot.send_message(message.from_user.id, '–ù–µ –ø–æ–Ω—è–ª', reply_markup=buttons.admin())
            bot.register_next_step_handler(message, admin)

def check_admin(message):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        bot.send_message(message.from_user.id, '–û–∫–µ', reply_markup=buttons.admin())
        bot.register_next_step_handler(message, admin)
    else:
        try:
            id = int(message.text)
            x = data.hero_info(id)
            bot.send_message(message.from_user.id, f'id - {x[0]}\n'
                                                   f'name - {x[1]}\n'
                                                   f'real name - {x[2]}\n'
                                                   f' user - {x[3]}\n'
                                                   f'lvl - {x[4]}\n'
                                                   f'min_power - {x[5]}\n'
                                                   f'max_power - {x[6]}\n'
                                                   f'\info - {x[7]}\n'
                                                   f'medals - {x[8]}\n'
                                                   f'invent - {x[9]}\n'
                                                   f'frinds - {x[10]}',
                             reply_markup=buttons.admin())
            bot.register_next_step_handler(message, admin)
        except:
            bot.send_message(message.from_user.id, '–ù–µ –ø–æ–Ω—è–ª', reply_markup=buttons.admin())
            bot.register_next_step_handler(message, admin)





bot.polling(none_stop=True)